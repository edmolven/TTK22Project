# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/DockingMpcParameters.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import custom_msgs.msg

class DockingMpcParameters(genpy.Message):
  _md5sum = "a4ee0113d800b702c767f93572165b2f"
  _type = "custom_msgs/DockingMpcParameters"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float64 prediction_horizon
uint16 control_intervals
uint16 polynomial_degree
float64[] theta
float64 initial_time
float64 solution_time
HalfspaceDescription convex_set
float64[] initial_state

================================================================================
MSG: custom_msgs/HalfspaceDescription
# Describes halfspace s.t. Ax <= b is within the halfspace.
float64[] A
float64[] b"""
  __slots__ = ['prediction_horizon','control_intervals','polynomial_degree','theta','initial_time','solution_time','convex_set','initial_state']
  _slot_types = ['float64','uint16','uint16','float64[]','float64','float64','custom_msgs/HalfspaceDescription','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prediction_horizon,control_intervals,polynomial_degree,theta,initial_time,solution_time,convex_set,initial_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DockingMpcParameters, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prediction_horizon is None:
        self.prediction_horizon = 0.
      if self.control_intervals is None:
        self.control_intervals = 0
      if self.polynomial_degree is None:
        self.polynomial_degree = 0
      if self.theta is None:
        self.theta = []
      if self.initial_time is None:
        self.initial_time = 0.
      if self.solution_time is None:
        self.solution_time = 0.
      if self.convex_set is None:
        self.convex_set = custom_msgs.msg.HalfspaceDescription()
      if self.initial_state is None:
        self.initial_state = []
    else:
      self.prediction_horizon = 0.
      self.control_intervals = 0
      self.polynomial_degree = 0
      self.theta = []
      self.initial_time = 0.
      self.solution_time = 0.
      self.convex_set = custom_msgs.msg.HalfspaceDescription()
      self.initial_state = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d2H().pack(_x.prediction_horizon, _x.control_intervals, _x.polynomial_degree))
      length = len(self.theta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.theta))
      _x = self
      buff.write(_get_struct_2d().pack(_x.initial_time, _x.solution_time))
      length = len(self.convex_set.A)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.convex_set.A))
      length = len(self.convex_set.b)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.convex_set.b))
      length = len(self.initial_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.initial_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.convex_set is None:
        self.convex_set = custom_msgs.msg.HalfspaceDescription()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.prediction_horizon, _x.control_intervals, _x.polynomial_degree,) = _get_struct_d2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.theta = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.initial_time, _x.solution_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.convex_set.A = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.convex_set.b = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.initial_state = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d2H().pack(_x.prediction_horizon, _x.control_intervals, _x.polynomial_degree))
      length = len(self.theta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.theta.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.initial_time, _x.solution_time))
      length = len(self.convex_set.A)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.convex_set.A.tostring())
      length = len(self.convex_set.b)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.convex_set.b.tostring())
      length = len(self.initial_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.initial_state.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.convex_set is None:
        self.convex_set = custom_msgs.msg.HalfspaceDescription()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.prediction_horizon, _x.control_intervals, _x.polynomial_degree,) = _get_struct_d2H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.theta = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.initial_time, _x.solution_time,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.convex_set.A = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.convex_set.b = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.initial_state = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_d2H = None
def _get_struct_d2H():
    global _struct_d2H
    if _struct_d2H is None:
        _struct_d2H = struct.Struct("<d2H")
    return _struct_d2H
