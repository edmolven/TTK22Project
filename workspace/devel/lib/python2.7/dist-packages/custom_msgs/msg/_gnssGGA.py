# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/gnssGGA.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import custom_msgs.msg
import genpy
import std_msgs.msg

class gnssGGA(genpy.Message):
  _md5sum = "76d41a768710775209ac34b58a4ce202"
  _type = "custom_msgs/gnssGGA"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#Something something

Header header

time sat_time

float64 latitude
string lat_direction
float64 longitude
string lon_direction

float64 altitude

gnssGGA_status status


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: custom_msgs/gnssGGA_status
int64 numSat
float64 hDOP
int64 mode
string modeStatus
"""
  __slots__ = ['header','sat_time','latitude','lat_direction','longitude','lon_direction','altitude','status']
  _slot_types = ['std_msgs/Header','time','float64','string','float64','string','float64','custom_msgs/gnssGGA_status']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sat_time,latitude,lat_direction,longitude,lon_direction,altitude,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gnssGGA, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sat_time is None:
        self.sat_time = genpy.Time()
      if self.latitude is None:
        self.latitude = 0.
      if self.lat_direction is None:
        self.lat_direction = ''
      if self.longitude is None:
        self.longitude = 0.
      if self.lon_direction is None:
        self.lon_direction = ''
      if self.altitude is None:
        self.altitude = 0.
      if self.status is None:
        self.status = custom_msgs.msg.gnssGGA_status()
    else:
      self.header = std_msgs.msg.Header()
      self.sat_time = genpy.Time()
      self.latitude = 0.
      self.lat_direction = ''
      self.longitude = 0.
      self.lon_direction = ''
      self.altitude = 0.
      self.status = custom_msgs.msg.gnssGGA_status()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Id().pack(_x.sat_time.secs, _x.sat_time.nsecs, _x.latitude))
      _x = self.lat_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.longitude))
      _x = self.lon_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_dqdq().pack(_x.altitude, _x.status.numSat, _x.status.hDOP, _x.status.mode))
      _x = self.status.modeStatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sat_time is None:
        self.sat_time = genpy.Time()
      if self.status is None:
        self.status = custom_msgs.msg.gnssGGA_status()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.sat_time.secs, _x.sat_time.nsecs, _x.latitude,) = _get_struct_2Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lat_direction = str[start:end].decode('utf-8')
      else:
        self.lat_direction = str[start:end]
      start = end
      end += 8
      (self.longitude,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lon_direction = str[start:end].decode('utf-8')
      else:
        self.lon_direction = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.altitude, _x.status.numSat, _x.status.hDOP, _x.status.mode,) = _get_struct_dqdq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.modeStatus = str[start:end].decode('utf-8')
      else:
        self.status.modeStatus = str[start:end]
      self.sat_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2Id().pack(_x.sat_time.secs, _x.sat_time.nsecs, _x.latitude))
      _x = self.lat_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.longitude))
      _x = self.lon_direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_dqdq().pack(_x.altitude, _x.status.numSat, _x.status.hDOP, _x.status.mode))
      _x = self.status.modeStatus
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sat_time is None:
        self.sat_time = genpy.Time()
      if self.status is None:
        self.status = custom_msgs.msg.gnssGGA_status()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.sat_time.secs, _x.sat_time.nsecs, _x.latitude,) = _get_struct_2Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lat_direction = str[start:end].decode('utf-8')
      else:
        self.lat_direction = str[start:end]
      start = end
      end += 8
      (self.longitude,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.lon_direction = str[start:end].decode('utf-8')
      else:
        self.lon_direction = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.altitude, _x.status.numSat, _x.status.hDOP, _x.status.mode,) = _get_struct_dqdq().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.modeStatus = str[start:end].decode('utf-8')
      else:
        self.status.modeStatus = str[start:end]
      self.sat_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_dqdq = None
def _get_struct_dqdq():
    global _struct_dqdq
    if _struct_dqdq is None:
        _struct_dqdq = struct.Struct("<dqdq")
    return _struct_dqdq
_struct_2Id = None
def _get_struct_2Id():
    global _struct_2Id
    if _struct_2Id is None:
        _struct_2Id = struct.Struct("<2Id")
    return _struct_2Id
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
