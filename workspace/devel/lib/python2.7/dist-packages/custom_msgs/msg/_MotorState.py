# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msgs/MotorState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorState(genpy.Message):
  _md5sum = "5ba26985322fe9ed7cb8984452bc3eb4"
  _type = "custom_msgs/MotorState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Custom message for holding the motor state
# from torqeedo motors


bool set_throttle_stop
bool motor_in_temp_limit
bool battery_nearly_empty
float64 master_error_code
float64 motor_voltage 
float64 motor_current
float64 motor_speed
float64 motor_pcb_temp
float64 motor_stator_temp
float64 battery_voltage
float64 battery_current
float64 temperature_reverse_voltage_protection
"""
  __slots__ = ['set_throttle_stop','motor_in_temp_limit','battery_nearly_empty','master_error_code','motor_voltage','motor_current','motor_speed','motor_pcb_temp','motor_stator_temp','battery_voltage','battery_current','temperature_reverse_voltage_protection']
  _slot_types = ['bool','bool','bool','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       set_throttle_stop,motor_in_temp_limit,battery_nearly_empty,master_error_code,motor_voltage,motor_current,motor_speed,motor_pcb_temp,motor_stator_temp,battery_voltage,battery_current,temperature_reverse_voltage_protection

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.set_throttle_stop is None:
        self.set_throttle_stop = False
      if self.motor_in_temp_limit is None:
        self.motor_in_temp_limit = False
      if self.battery_nearly_empty is None:
        self.battery_nearly_empty = False
      if self.master_error_code is None:
        self.master_error_code = 0.
      if self.motor_voltage is None:
        self.motor_voltage = 0.
      if self.motor_current is None:
        self.motor_current = 0.
      if self.motor_speed is None:
        self.motor_speed = 0.
      if self.motor_pcb_temp is None:
        self.motor_pcb_temp = 0.
      if self.motor_stator_temp is None:
        self.motor_stator_temp = 0.
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.battery_current is None:
        self.battery_current = 0.
      if self.temperature_reverse_voltage_protection is None:
        self.temperature_reverse_voltage_protection = 0.
    else:
      self.set_throttle_stop = False
      self.motor_in_temp_limit = False
      self.battery_nearly_empty = False
      self.master_error_code = 0.
      self.motor_voltage = 0.
      self.motor_current = 0.
      self.motor_speed = 0.
      self.motor_pcb_temp = 0.
      self.motor_stator_temp = 0.
      self.battery_voltage = 0.
      self.battery_current = 0.
      self.temperature_reverse_voltage_protection = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B9d().pack(_x.set_throttle_stop, _x.motor_in_temp_limit, _x.battery_nearly_empty, _x.master_error_code, _x.motor_voltage, _x.motor_current, _x.motor_speed, _x.motor_pcb_temp, _x.motor_stator_temp, _x.battery_voltage, _x.battery_current, _x.temperature_reverse_voltage_protection))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 75
      (_x.set_throttle_stop, _x.motor_in_temp_limit, _x.battery_nearly_empty, _x.master_error_code, _x.motor_voltage, _x.motor_current, _x.motor_speed, _x.motor_pcb_temp, _x.motor_stator_temp, _x.battery_voltage, _x.battery_current, _x.temperature_reverse_voltage_protection,) = _get_struct_3B9d().unpack(str[start:end])
      self.set_throttle_stop = bool(self.set_throttle_stop)
      self.motor_in_temp_limit = bool(self.motor_in_temp_limit)
      self.battery_nearly_empty = bool(self.battery_nearly_empty)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B9d().pack(_x.set_throttle_stop, _x.motor_in_temp_limit, _x.battery_nearly_empty, _x.master_error_code, _x.motor_voltage, _x.motor_current, _x.motor_speed, _x.motor_pcb_temp, _x.motor_stator_temp, _x.battery_voltage, _x.battery_current, _x.temperature_reverse_voltage_protection))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 75
      (_x.set_throttle_stop, _x.motor_in_temp_limit, _x.battery_nearly_empty, _x.master_error_code, _x.motor_voltage, _x.motor_current, _x.motor_speed, _x.motor_pcb_temp, _x.motor_stator_temp, _x.battery_voltage, _x.battery_current, _x.temperature_reverse_voltage_protection,) = _get_struct_3B9d().unpack(str[start:end])
      self.set_throttle_stop = bool(self.set_throttle_stop)
      self.motor_in_temp_limit = bool(self.motor_in_temp_limit)
      self.battery_nearly_empty = bool(self.battery_nearly_empty)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B9d = None
def _get_struct_3B9d():
    global _struct_3B9d
    if _struct_3B9d is None:
        _struct_3B9d = struct.Struct("<3B9d")
    return _struct_3B9d
