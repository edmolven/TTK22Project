// Generated by gencpp from file custom_msgs/DockingMpcParameters.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_DOCKINGMPCPARAMETERS_H
#define CUSTOM_MSGS_MESSAGE_DOCKINGMPCPARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msgs/HalfspaceDescription.h>

namespace custom_msgs
{
template <class ContainerAllocator>
struct DockingMpcParameters_
{
  typedef DockingMpcParameters_<ContainerAllocator> Type;

  DockingMpcParameters_()
    : prediction_horizon(0.0)
    , control_intervals(0)
    , polynomial_degree(0)
    , theta()
    , initial_time(0.0)
    , solution_time(0.0)
    , convex_set()
    , initial_state()  {
    }
  DockingMpcParameters_(const ContainerAllocator& _alloc)
    : prediction_horizon(0.0)
    , control_intervals(0)
    , polynomial_degree(0)
    , theta(_alloc)
    , initial_time(0.0)
    , solution_time(0.0)
    , convex_set(_alloc)
    , initial_state(_alloc)  {
  (void)_alloc;
    }



   typedef double _prediction_horizon_type;
  _prediction_horizon_type prediction_horizon;

   typedef uint16_t _control_intervals_type;
  _control_intervals_type control_intervals;

   typedef uint16_t _polynomial_degree_type;
  _polynomial_degree_type polynomial_degree;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _theta_type;
  _theta_type theta;

   typedef double _initial_time_type;
  _initial_time_type initial_time;

   typedef double _solution_time_type;
  _solution_time_type solution_time;

   typedef  ::custom_msgs::HalfspaceDescription_<ContainerAllocator>  _convex_set_type;
  _convex_set_type convex_set;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _initial_state_type;
  _initial_state_type initial_state;





  typedef boost::shared_ptr< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> const> ConstPtr;

}; // struct DockingMpcParameters_

typedef ::custom_msgs::DockingMpcParameters_<std::allocator<void> > DockingMpcParameters;

typedef boost::shared_ptr< ::custom_msgs::DockingMpcParameters > DockingMpcParametersPtr;
typedef boost::shared_ptr< ::custom_msgs::DockingMpcParameters const> DockingMpcParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::DockingMpcParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'custom_msgs': ['/home/eivinddm/milliAmpere/workspace/src/custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4ee0113d800b702c767f93572165b2f";
  }

  static const char* value(const ::custom_msgs::DockingMpcParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4ee0113d800b702ULL;
  static const uint64_t static_value2 = 0xc767f93572165b2fULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/DockingMpcParameters";
  }

  static const char* value(const ::custom_msgs::DockingMpcParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float64 prediction_horizon\n"
"uint16 control_intervals\n"
"uint16 polynomial_degree\n"
"float64[] theta\n"
"float64 initial_time\n"
"float64 solution_time\n"
"HalfspaceDescription convex_set\n"
"float64[] initial_state\n"
"\n"
"================================================================================\n"
"MSG: custom_msgs/HalfspaceDescription\n"
"# Describes halfspace s.t. Ax <= b is within the halfspace.\n"
"float64[] A\n"
"float64[] b\n"
;
  }

  static const char* value(const ::custom_msgs::DockingMpcParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.prediction_horizon);
      stream.next(m.control_intervals);
      stream.next(m.polynomial_degree);
      stream.next(m.theta);
      stream.next(m.initial_time);
      stream.next(m.solution_time);
      stream.next(m.convex_set);
      stream.next(m.initial_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockingMpcParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::DockingMpcParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::DockingMpcParameters_<ContainerAllocator>& v)
  {
    s << indent << "prediction_horizon: ";
    Printer<double>::stream(s, indent + "  ", v.prediction_horizon);
    s << indent << "control_intervals: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.control_intervals);
    s << indent << "polynomial_degree: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.polynomial_degree);
    s << indent << "theta[]" << std::endl;
    for (size_t i = 0; i < v.theta.size(); ++i)
    {
      s << indent << "  theta[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.theta[i]);
    }
    s << indent << "initial_time: ";
    Printer<double>::stream(s, indent + "  ", v.initial_time);
    s << indent << "solution_time: ";
    Printer<double>::stream(s, indent + "  ", v.solution_time);
    s << indent << "convex_set: ";
    s << std::endl;
    Printer< ::custom_msgs::HalfspaceDescription_<ContainerAllocator> >::stream(s, indent + "  ", v.convex_set);
    s << indent << "initial_state[]" << std::endl;
    for (size_t i = 0; i < v.initial_state.size(); ++i)
    {
      s << indent << "  initial_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.initial_state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_DOCKINGMPCPARAMETERS_H
