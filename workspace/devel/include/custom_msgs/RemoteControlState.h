// Generated by gencpp from file custom_msgs/RemoteControlState.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_REMOTECONTROLSTATE_H
#define CUSTOM_MSGS_MESSAGE_REMOTECONTROLSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <custom_msgs/JoyAxis.h>
#include <custom_msgs/JoyAxis.h>

namespace custom_msgs
{
template <class ContainerAllocator>
struct RemoteControlState_
{
  typedef RemoteControlState_<ContainerAllocator> Type;

  RemoteControlState_()
    : header()
    , left_stick()
    , right_stick()
    , override_switch(0)
    , safe_mode(0)  {
    }
  RemoteControlState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_stick(_alloc)
    , right_stick(_alloc)
    , override_switch(0)
    , safe_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::custom_msgs::JoyAxis_<ContainerAllocator>  _left_stick_type;
  _left_stick_type left_stick;

   typedef  ::custom_msgs::JoyAxis_<ContainerAllocator>  _right_stick_type;
  _right_stick_type right_stick;

   typedef uint8_t _override_switch_type;
  _override_switch_type override_switch;

   typedef uint8_t _safe_mode_type;
  _safe_mode_type safe_mode;





  typedef boost::shared_ptr< ::custom_msgs::RemoteControlState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::RemoteControlState_<ContainerAllocator> const> ConstPtr;

}; // struct RemoteControlState_

typedef ::custom_msgs::RemoteControlState_<std::allocator<void> > RemoteControlState;

typedef boost::shared_ptr< ::custom_msgs::RemoteControlState > RemoteControlStatePtr;
typedef boost::shared_ptr< ::custom_msgs::RemoteControlState const> RemoteControlStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::RemoteControlState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::RemoteControlState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'custom_msgs': ['/home/eivinddm/milliAmpere/workspace/src/custom_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::RemoteControlState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::RemoteControlState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::RemoteControlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::RemoteControlState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::RemoteControlState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::RemoteControlState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::RemoteControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ceda10c7b37590a99e768bcaea5d1257";
  }

  static const char* value(const ::custom_msgs::RemoteControlState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xceda10c7b37590a9ULL;
  static const uint64_t static_value2 = 0x9e768bcaea5d1257ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::RemoteControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/RemoteControlState";
  }

  static const char* value(const ::custom_msgs::RemoteControlState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::RemoteControlState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Custom message to hold the state of the joystick at a given time\n"
"# Left stick contains the axis values of the left stick, as a JoyAxis custom message\n"
"# Right stick contains the axis values of the right stick, as a JoyAxis custom message\n"
"# override_switch holds the position of the override switch, which can be 0, 1 or 2\n"
"\n"
"Header header\n"
"\n"
"custom_msgs/JoyAxis left_stick\n"
"custom_msgs/JoyAxis right_stick\n"
"uint8 override_switch\n"
"uint8 safe_mode\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: custom_msgs/JoyAxis\n"
"# Custom message to hold the value of the axes of a joystick\n"
"\n"
"int16 x_axis\n"
"int16 y_axis\n"
;
  }

  static const char* value(const ::custom_msgs::RemoteControlState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::RemoteControlState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_stick);
      stream.next(m.right_stick);
      stream.next(m.override_switch);
      stream.next(m.safe_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RemoteControlState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::RemoteControlState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::RemoteControlState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_stick: ";
    s << std::endl;
    Printer< ::custom_msgs::JoyAxis_<ContainerAllocator> >::stream(s, indent + "  ", v.left_stick);
    s << indent << "right_stick: ";
    s << std::endl;
    Printer< ::custom_msgs::JoyAxis_<ContainerAllocator> >::stream(s, indent + "  ", v.right_stick);
    s << indent << "override_switch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.override_switch);
    s << indent << "safe_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safe_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_REMOTECONTROLSTATE_H
